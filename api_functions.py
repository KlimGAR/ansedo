import logging
import sqlite3

from telegram import ReplyKeyboardRemove, ReplyKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, ContextTypes

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
# ---------------- tools ----------------
logger = logging.getLogger(__name__)
TOKEN = '6693149081:AAEoLL-E4KTBBPMrccPoa_vysJeZVi4unVg'
TAG_BOT = '@Ansedo_Bot'
ASK_NAME, ASK_GAME, ASK_COOP, ASK_HOURS, ASK_DESC = range(1, 6)
con = sqlite3.connect("data.sqlite")
cur = con.cursor()


# ---------------- Commands ----------------


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"<b>–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Å–æ–∫–æ–º–∞–¥–Ω–∏–∫–∞."
        f" C–Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ ( /help ).</b>",
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_html("<b>ü†ñ</b> /new - <i>—Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É</i>\n"
                                    "   <b>‚ñº</b>\n"
                                    "   <b>ü†ñ</b> /cancel - <i>–æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</i>\n"
                                    "<b>ü†ñ</b> /view - <i>–ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É</i>\n"
                                    "<b>ü†ñ</b> /stop - <i>!—Ä–µ–¥–∞–∫–Ω—É—Ç—å!</i>\n"
                                    )


async def view(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("soon..")


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("soon..")


async def new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = context.user_data
    data['user_id'] = user_id
    await update.message.reply_text("–ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å ?")
    return ASK_NAME


# --- Profile ---

async def _name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    data = context.user_data
    data['name'] = user_message

    # ----SAVED!

    keyboard_games = [['CS2', 'Dota 2',
                       'Pubg', 'Roblox'], ['Fortnite', 'Valorant',
                                           'Minecraft', 'Terarria']]
    reply_markup = ReplyKeyboardMarkup(keyboard_games, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ü–æ –∫–∞–∫–æ–π –∏–≥—Ä–µ ?", reply_markup=reply_markup)

    return ASK_GAME


async def _game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard_games = [['CS2', 'Dota 2',
                       'Pubg', 'Roblox'], ['Fortnite', 'Valorant',
                                           'Minecraft', 'Terarria']]

    user_message = update.message.text

    if user_message not in keyboard_games[0] and user_message not in keyboard_games[1]:
        return ASK_GAME

    data = context.user_data
    data['game'] = user_message
    # ----SAVED!
    keyboard_games = [['–ö–æ–º–∞–Ω–¥—É', '–°–æ–∫–æ–º–∞–¥–Ω–∏–∫–∞']]
    reply_markup = ReplyKeyboardMarkup(keyboard_games, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ö–æ–≥–æ –∏—â–µ—à—å ?", reply_markup=reply_markup)

    return ASK_COOP


async def _coop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard_games = [['–ö–æ–º–∞–Ω–¥—É', '–°–æ–∫–æ–º–∞–¥–Ω–∏–∫–∞']]

    user_message = update.message.text

    if user_message not in keyboard_games[0]:
        return ASK_COOP

    data = context.user_data
    data['coop'] = user_message
    # ----SAVED!
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ —Ç–≤–æ–µ–π –∏–≥—Ä–µ ?")

    return ASK_HOURS


async def _hours(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    if not user_message.isdigit():
        return ASK_HOURS

    data = context.user_data
    data['hours'] = user_message
    # ----SAVED!

    await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é.",
                                    reply_markup=ReplyKeyboardRemove())

    return ASK_DESC


async def _description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    data = context.user_data
    data['desc'] = user_message

    with open('user_data.txt', 'a') as file:
        file.write(
            '\n' + f'''{data['game']}, {data['name']}, {data['coop']}, {data['hours']}, {data['desc']}, {data['user_id']}''')

    # ----SAVED!
    sql = """
        INSERT INTO profile (game, name, st, hours, description, user_id)
        VALUES (?, ?, ?, ?, ?, ?)
    """
    cur.execute(sql, (
        data['game'],
        data['name'],
        data['coop'],
        data['hours'],
        data['desc'],
        data['user_id']
    ))
    con.commit()
    con.close()
    return ConversationHandler.END


# ---------------- Handle ----------------

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_type: str = update.message.chat.type
    text_received: str = update.message.text
    await update.message.reply_text("-–æ-", )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω")
    return ConversationHandler.END


# ---------------- Main functions ----------------


def main() -> None:
    app = Application.builder().token(TOKEN).build()

    # Connecting commands...
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler('stop', stop))
    app.add_handler(CommandHandler('view', view))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('new', new)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, _name)],

            ASK_GAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, _game)],

            ASK_COOP: [MessageHandler(filters.TEXT & ~filters.COMMAND, _coop)],

            ASK_HOURS: [MessageHandler(filters.TEXT & ~filters.COMMAND, _hours)],

            ASK_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, _description)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    app.add_handler(conv_handler)

    # Connecting messages...
    # app.add_handler(MessageHandler(filters.TEXT, handle_text_message)) - –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–∑–¥–∞–Ω —á–∏—Å—Ç–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤

    # |Starting|
    app.run_polling()
